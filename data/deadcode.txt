	public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
		return map.entrySet()
				.stream()
				.sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))
				.collect(Collectors.toMap(
						Map.Entry::getKey, 
						Map.Entry::getValue, 
						(e1, e2) -> e1, 
						LinkedHashMap::new
						));
	}

							Map<String, Double> nutriValue_map = new HashMap<String, Double>();
						while (true) {
							Document recipeSingle = recipeCurs.tryNext();
							if (recipeSingle == null)
								break;		
							String title = recipeSingle.getString("title");
							Object val = recipeSingle.get(nutrient);
							if (val!=null) {
								Double val_d = Double.parseDouble(val.toString());
								if (val_d!=0.0)
									nutriValue_map.put(title, val_d);		
							}
						}
						if (nutriValue_map != null) {
							nutriValue_map = sortByValue(nutriValue_map);
							Iterator<Entry<String, Double>> nutriValue_it = nutriValue_map.entrySet().iterator();
							boolean runFlag = nutriValue_it.hasNext();
										while (nutriValue_it.hasNext()) {
										Map.Entry<String, Double> pair = (Map.Entry<String, Double>)nutriValue_it.next();
										System.out.println((i+1)+"  "+ "Title: "+pair.getKey() + ",  "+nutrient+": " + pair.getValue());
										recipeList.add(pair.getKey());
										nutriValue_it.remove(); // avoids a ConcurrentModificationException
										i++;
									if (i==5)
											break;
										if (!nutriValue_it.hasNext())
											runFlag = false;
						}
	
				}
					}
	